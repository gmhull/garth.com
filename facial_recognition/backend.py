import face_recognition
from PIL import Image
import cv2
import numpy as np
import re


class FaceRecognition(object):
    """Used to detect a user on the website and feed them user specific pages."""

    def compare_faces(self):
        # Grab the face encoding of the person that you want to compare to.
        known_image_encodings = self.get_known_img_encodings()

        # Create a count variable to verify that the face is correct.
        self.count = 0
        self.last_person = None

        # Initialize video capture
        cam = cv2.VideoCapture(0)
        while True:
            # ret == whether the video feed is returning any data
            # frame == the feed itself
            ret, frame = cam.read()

            # If we are receiving a video feed, look at the image for a face and compare
            # that face with the known encodings
            if ret:
                face_encodings = self.get_face_encoding(frame)

                try:
                    # Calculate the face distance between the saved photo and the
                    # screenshot.  If no face is located in the screenshot, the
                    # exception will be thrown.
                    smallest_dist = 1
                    closest_match = None
                    for face in known_image_encodings:
                        face_distance = face_recognition.face_distance(face_encodings, face[1])[0]
                        if face_distance < smallest_dist:
                            smallest_dist = face_distance
                            closest_match = face
                except:
                    # Share that no face was found and set face distance to a dummy val
                    face_distance = None
                    print("No face observed in image")

                # get the current count and break if the face is confirmed to
                # match or not
                self.check_face_distances(smallest_dist, closest_match)
                if self.count == None:
                    break

            # Display the screenshots
            cv2.imshow('screen', frame)
            # Break the loop if the escape key is pressed
            k = cv2.waitKey(5) & 0xFF
            if k == 27:
                break
        # Stop using the camera and close the image window
        cam.release()
        cv2.destroyAllWindows()

        return self.last_person[0], self.last_person[2]

    def check_face_distances(self, face_distance, closest_match):
        # Reset the counter if their is no face seen
        # print(self.last_person[0], closest_match[0], self.count)
        if face_distance == None:
            self.count = 0
            print("No face here")
        # Up the count variable for every sequential face match
        elif face_distance <= 0.6 and closest_match == self.last_person:
            if self.count < 0:
                self.count = 0
            self.count += 1
        # If this is a new face, reset count to 0
        elif face_distance <= 0.6:
            self.count = 0
        # Lower the count variable for every sequential face mismatch
        elif face_distance > 0.6:
            if self.count > 0:
                self.count = 0
            self.count -= 1

        # After we have verified the faces are the same 5 times in a row, we
        # are confident that the people are the same.
        if self.count == 5:
            print(f"This is {closest_match[0]}")
            self.count = None
        # After we have verified the faces are different 5 times in a row, we
        # are confident that the people are not the same.
        elif self.count == -5:
            print("This person is not recognized")
            self.count = None

        self.last_person = closest_match

    def get_known_img_encodings(self):
        # # Load the image of the person we want to find similar people for
        # known_image = face_recognition.load_image_file("Garth Face.png")
        #
        # # Encode the known image
        # known_image_encoding = face_recognition.face_encodings(known_image)[0]

        # Copied the image encoding of a picture so that we dont need to run the process each time.
        # face_encodings = string_from_user_model
        # string_list = re.split('[\s,]+', face_encodings)
        # face_encoding = [float(x) for x in string_list]

        known_image_encodings = [
                                ['Bjorn',np.array([-9.64986458e-02,  1.12657592e-01,  2.17788871e-02, -6.21140003e-02, -1.05219923e-01, -1.02882981e-02, -3.74366157e-03, -3.05749029e-02,  1.35635316e-01, -7.37942830e-02,  2.08169758e-01, -6.64644316e-02, -3.16639125e-01,  8.08780361e-03, -1.34239569e-02,  1.03736065e-01, -1.62208483e-01, -1.75880000e-01, -6.50231540e-02, -1.24842808e-01, 5.92762157e-02,  2.28785276e-02, -4.72231545e-02,  8.48146975e-02, -9.49162245e-02, -2.90826946e-01, -8.38090554e-02, -1.55835561e-02, 2.81401947e-02, -1.88960537e-01,  1.11517057e-01,  9.46665779e-02, -1.68795809e-01,  1.93080474e-02,  4.56023477e-02,  1.36379033e-01, -1.30885512e-01, -4.72614355e-02,  2.42800146e-01, -1.23159084e-02, -1.15754418e-01,  2.98559219e-02, -7.81292561e-03,  3.25064927e-01,  1.35805145e-01, -9.71559901e-04, -2.76646502e-02, -5.77375516e-02,  9.55378935e-02, -2.37448722e-01,  4.22700606e-02,  2.76380867e-01,  1.11703485e-01,  8.88677016e-02,  5.32916896e-02, -1.48221165e-01, -3.52009125e-02,  2.03620985e-01, -1.81518987e-01,  9.79165137e-02,  4.06023413e-02, -1.80353791e-01, -4.12233025e-02, -1.40311718e-01,  1.31120443e-01,  9.09137130e-02, -1.44902498e-01, -2.05126241e-01,  2.10672930e-01, -1.24268889e-01, -9.40705463e-02,  1.44891188e-01, -1.19847670e-01, -1.74283370e-01, -2.00854555e-01,  5.20775318e-02, 3.74166280e-01,  7.90203363e-02, -1.52636811e-01, -9.50582884e-03, -2.45843865e-02, -2.99232546e-02,  5.54503640e-06,  5.70928007e-02, -8.09017271e-02, -1.12087876e-01, -1.24455154e-01,  9.77732986e-02, 1.61556095e-01,  5.14561590e-03, -1.09111689e-01,  1.24552011e-01, -1.05852447e-02,  7.00710118e-02,  2.64424980e-02,  2.65720766e-02, -7.94812664e-02, -1.01167057e-02, -1.54548258e-01, -1.49627328e-02, -4.85987030e-02, -1.25451282e-01, -7.83419907e-02,  9.57178175e-02, -3.92266437e-02,  2.00593114e-01,  3.73823866e-02,  2.36137398e-03, -1.20103545e-01,  5.55548482e-02, -1.60481781e-01,  4.78392579e-02, 1.84623227e-01, -3.36283416e-01,  2.87154794e-01,  1.63769260e-01, 3.24345306e-02,  9.96400341e-02,  5.34585752e-02,  6.37769774e-02, 8.40895157e-03, -1.00816466e-01, -2.00247690e-01, -1.03377171e-01, 1.53689049e-02,  4.24168147e-02,  3.22866775e-02,  5.63573558e-04,]),'BjookieMonster'],
                                ['Khelloren',np.array([-0.12588419, 0.09778484, 0.09669706, -0.08956337, -0.19526468, -0.04570062, 0.04803643, -0.04364938, 0.1937433, -0.07084855, 0.17663036, -0.07972454, -0.3038035, 0.05024868, -0.07259637, 0.18679996, -0.151621, -0.16585866, -0.12695196, -0.07979389, -0.02963453, 0.03416734, -0.04507689, -0.01429388, -0.1221043, -0.33694187, -0.0222193, -0.05903667, 0.05264872, -0.01534027, 0.03964283, 0.17475539, -0.14775209, -0.00159608, 0.11543252, 0.08354791, -0.07430721, -0.02453046, 0.28106055, -0.04639241, -0.24050586, -0.06432252, 0.06978498, 0.19980627, 0.21650633, 0.03490862, -0.00334447, -0.10918595, 0.10200464, -0.27231038, -0.05466678, 0.20037524, 0.03003123, 0.08677323, 0.00885798, -0.13473874, 0.03188283, 0.15899636, -0.23626344, -0.08213958, 0.0508837, -0.30289626, -0.08663838, -0.05032773, 0.24594516, 0.01401246, -0.12345679, -0.10762487, 0.2130492, -0.1786837, -0.01042958, 0.05919618, -0.04911472, -0.09271183, -0.25303417, 0.01367988, 0.39265716, 0.07782838, -0.1046159, 0.07191774, -0.07436021, -0.04337032, 0.01542556, 0.02700384, -0.14422876, -0.11771701, -0.08998394, -0.01118406, 0.24935547, -0.10007059, 0.07858794, 0.13250418, 0.00651546, 0.01147804, -0.01224065, 0.01585003, -0.12351481, -0.06394189, -0.08540618, -0.03504207, 0.0512794, -0.08623406, 0.01823706, 0.09378059, -0.23760147, 0.10919203, -0.04867712, -0.08470273, -0.0261904, -0.12192667, 0.00095181, -0.03845391, 0.18448883, -0.22758576, 0.22467475, 0.15676337, -0.03146803, 0.18150797, 0.09051741, 0.00472604, -0.04312918, -0.05501081, -0.12247903, -0.11127062, 0.1394411, -0.02095475, 0.09238561, -0.01677375]),'Velocipastor'],
                                ['Solvelis',np.array([-0.06508087, 0.10704409, 0.03953771, -0.12145507, -0.12644212, 0.00874794, -0.09023664, -0.04626083, 0.21009958, -0.24569654, 0.09744484, -0.05188389, -0.22333486, 0.03257897, 0.0135618, 0.17535661, -0.19129428, -0.21873078, -0.04967026, -0.10278521, 0.07210241, 0.08242159, 0.00660577, 0.11527517, -0.20686093, -0.33984935, -0.07121621, -0.05304551, -0.02483523, -0.16560256, 0.07205684, 0.05984902, -0.14568369, 0.10339903, 0.00320311, 0.09308685, -0.03257393, -0.15983766, 0.25879848, 0.06366196, -0.24849802, -0.03680001, 0.06563561, 0.26062036, 0.22767489, -0.03538581, 0.03800561, -0.07083631, 0.23924734, -0.31017026, 0.06071727, 0.16538018, 0.05936825, 0.06159557, 0.137594, -0.13846816, 0.02305975, 0.16302839, -0.16863804, 0.08613089, 0.02483524, -0.12318623, 0.00511291, -0.04500373, 0.27863839, 0.07917735, -0.14391871, -0.16973367, 0.26610777, -0.16896755, -0.12234768, 0.14298499, -0.11410439, -0.15168421, -0.29237175, -0.0004172, 0.37397107, 0.13357617, -0.12886193, 0.08105619, -0.03351285, -0.03115841, -0.02542013, 0.23538722, -0.0483522, -0.07588843, -0.06944876, 0.05950505, 0.29603907, 0.01815441, -0.07704161, 0.26336721, 0.03870481, 0.0059769, 0.002683, 0.04464298, -0.16210316, -0.07363626, -0.08578022, -0.04818241, 0.02629539, -0.03416177, -0.08254968, 0.21401754, -0.20515159, 0.21274403, -0.08924203, -0.0627057, -0.04535527, 0.06446584, -0.09443327, -0.02650215, 0.11350284, -0.29381025, 0.09887333, 0.13954152, 0.06553463, 0.14017414, 0.02138437, 0.09948319, 0.05153609, -0.03929162, -0.19770123, -0.10408355, 0.03095459, 0.00078131, 0.00445925, 0.06303989]),'DragonSimp'],
                                ['Hedyn',np.array([-0.14313681, 0.10733758, 0.19486266, -0.12357948, -0.04297278, 0.10180297, -0.01443774, -0.01856272, 0.1651092, -0.14452416, 0.18001194, 0.00140018, -0.24295108, 0.10210086, 0.01526689, 0.21463378, -0.2027434, -0.14298725, -0.12529036, -0.08202679, -0.03163461, 0.10621887, 0.00162536, 0.01753746, -0.2113305, -0.32497454, -0.04801963, -0.09491433, -0.01398292, -0.09842605, 0.0211956, 0.01377183, -0.12265053, 0.10374797, 0.05630904, 0.07986228, -0.12170526, -0.12220759, 0.23405081, 0.03541855, -0.23440453, -0.05086431, 0.04616626, 0.25227934, 0.23409051, 0.04104194, 0.02117651, -0.07970436, 0.09911707, -0.39114082, -0.01977986, 0.18274797, -0.01443494, 0.1278355, 0.07899968, -0.18444282, 0.03460551, 0.1212232, -0.12248374, 0.04072012, 0.0034309, -0.14506781, 0.02587978, -0.04516384, 0.25325432, 0.07584115, -0.20526215, -0.14240199, 0.16769609, -0.10079427, -0.06144993, 0.12865347, -0.14707161, -0.208224, -0.25521973, -0.02033176, 0.35874224, 0.15405762, -0.14960456, -0.01340682, -0.13023622, 0.00631428, -0.00684678, 0.17510702, -0.05087837, -0.09337573, -0.04110648, 0.02851978, 0.26291081, -0.05645881, -0.0094297, 0.21024077, -0.02285166, -0.00881208, -0.09849585, 0.08711124, -0.16634548, -0.02899558, -0.08721841, -0.08603829, 0.03964151, 0.0528815, 0.00882501, 0.26085716, -0.26829645, 0.26706803, -0.07863045, -0.05930157, 0.02957901, -0.00568625, -0.02867353, 0.01273188, 0.18897581, -0.24845099, 0.13866027, 0.29635018, -0.02824027, 0.09437301, 0.08236083, 0.03370827, -0.0296951, 0.03299327, -0.27280858, -0.06918742, 0.03560207, -0.03609106, -0.00316394, -0.00660276]),'CanIGetAHand'],
                                ['Roan',np.array([-0.18602446, 0.15709898, 0.10564312, -0.01942982, -0.0127254, -0.05011111, 0.05203419, -0.01563726, 0.13508001, -0.02556461, 0.25422868, -0.01370231, -0.20531918, -0.07172965, 0.06882353, 0.06358506, -0.17671047, -0.10436974, -0.08799399, -0.14475745, 0.04532392, 0.06105134, -0.04863708, 0.10886148, -0.12986961, -0.26380941, -0.0713763, -0.16422684, 0.07400199, -0.09620661, 0.06616428, 0.05527853, -0.16296721, -0.00719509, -0.06745031, -0.02514472, 0.08159011, -0.00206436, 0.14396083, 0.07765587, -0.08260071, -0.05731995, -0.0305222, 0.30400249, 0.23275842, -0.02560228, -0.00555298, 0.02873124, -0.03386648, -0.20299266, -0.02978097, 0.16646281, 0.09541708, 0.08600086, -0.03003041, -0.14827491, -0.02391497, -0.04591615, -0.15787371, 0.09847992, 0.06894717, -0.18489924, -0.11490197, -0.0026005, 0.26550695, 0.07261223, -0.11259916, -0.15291789, 0.18869877, -0.1649586, -0.08612443, 0.11834904, -0.14234024, -0.06304766, -0.23153526, 0.1357449, 0.35795325, 0.12163278, -0.2229286, 0.00695023, -0.26020408, 0.05872433, 0.00726836, 0.02632684, -0.10134221, -0.04936204, -0.10840151, 0.03887149, 0.14139409, 0.05365447, -0.06950898, 0.2413529, 0.00731933, -0.01414244, 0.0679482, -0.02702207, 0.01070747, -0.08957092, -0.0495719, -0.04265594, 0.06359472, -0.14720926, -0.00651697, 0.11615488, -0.19616239, 0.133867, 0.03029399, -0.0041054, 0.02215778, 0.0948884, -0.13180684, -0.04157677, 0.21896295, -0.21733272, 0.19537419, 0.18454476, 0.06122215, 0.10302302, 0.04735476, 0.14952771, -0.10134934, -0.02542872, -0.0586608, -0.03301175, 0.03313458, -0.02987535, 0.02588183, 0.02344265]),'SongOfOak']
                                ]

        return known_image_encodings

    def get_face_encoding(self, frame):
        # variable name for the screenshot taken from the video feed
        img_file_name = "screenshot.png"
        # write the screenshot to an image
        cv2.imwrite(img_file_name, frame)
        # Load the screenshot image
        img = face_recognition.load_image_file(img_file_name)
        # Search the screenshot for faces and generate their face encoding
        face_encodings = face_recognition.face_encodings(img)

        return face_encodings


if __name__ == "__main__":
    # f = FaceRecognition()
    # # f.get_known_img_encodings()
    # f.compare_faces()
    print(data.data)
